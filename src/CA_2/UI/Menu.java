package CA_2.UI;

import CA_2.Models.*;
import CA_2.Utils.CompanyHelper;
import CA_2.Utils.SortAndSearchOperations;
import CA_2.Utils.Store;

import java.util.ArrayList;
import java.util.stream.Collectors;

import static CA_2.Utils.InputUtilities.*;

/**
 * Class for displaying a menu and asking the user for their choice.
 */
public class Menu {
    /*
     * All enums in this class contain:
     * - label: A string representation of each enum value, used to display options clearly.
     * - toString method: A method to convert enum values to their string representations.
     */

    /**
     * Enum for sorting directions.
     * This enum represents the sorting order options that can be displayed to the user.
     */
    public enum sortingDirection {
        ASC("Ascending"), // Ascending order
        DESC("Descending"); // Descending order

        // String label that stores the human-readable representation of the sorting order.
        private final String label;

        // Constructor for sortingDirection enum, setting the label for each sorting order.
        sortingDirection(String label) {
            this.label = label;
        }

        /**
         * Converts the enum value to a string representation.
         *
         * @return The string label of the sorting order.
         */
        @Override
        public String toString() {
            return label;
        }
    }

    /**
     * Enum for main menu options.
     * This enum represents the different choices available to the user in the main menu.
     */
    public enum menuOptions {
        //
        CREATE_COMPANY("Create a company"),
        //
        SHOW_COMPANIES_LIST("Show the list of existing companies"),
        // Option to sort a predefined list of people.
        SORT("Sort a Dummy List of People"),
        // Option to search within the list and retrieve information.
        SEARCH("Search in the List and Return Relevant Information"),
        // Option to enable user data entry (name, manager type, and department).
        USER_INPUT("Allow for New User Input (Name, ManagerChoice, and Department)"),
        // Option to create random entries with manager types and departments.
        GENERATE("Generate Random People with Manager Types and Departments"),
        // Option to display the stored data.
        PRINT("Print stored data"),
        // Option to exit the application.
        EXIT("Exit");

        // String label that stores the human-readable representation of each menu option.
        private final String label;

        // Constructor for menuOptions enum, setting the label for each menu option.
        menuOptions(String label) {
            this.label = label;
        }

        /**
         * Converts the enum value to a string representation.
         *
         * @return The string label of the menu option.
         */
        @Override
        public String toString() {
            return label;
        }
    }

    /**
     * Enum representing types of objects that can be input by the user or generated by the system.
     * This enum provides the user with options for selecting a specific type of entity to add to the system.
     */
    public enum userInputOptions {
        // Option to input a Developer.
        DEVELOPER("Developer"),
        // Option to input a Manager.
        MANAGER("Manager"),
        // Option to input a Department.
        DEPARTMENT("Department");

        // String label that holds the display name for each user input option.
        private final String label;

        // Constructor for userInputOptions, which initializes the label with a human-readable string.
        userInputOptions(String label) {
            this.label = label;
        }

        /**
         * Converts the enum value to a string representation.
         *
         * @return The string label representing the user input option.
         */
        @Override
        public String toString() {
            return label;
        }
    }

    /**
     * Enum representing types of objects that can be input by the user or generated by the system.
     * This enum provides the user with options for selecting a specific type of entity to add to the system.
     */
    public enum userGenerateOptions {
        // Option to generate an Employee.
        DEVELOPER("Developer"),
        // Option to generate a Manager.
        MANAGER("Manager"),
        COMPANY("Company");

        // String label that holds the display name for each user input option.
        private final String label;

        // Constructor for userInputOptions, which initializes the label with a human-readable string.
        userGenerateOptions(String label) {
            this.label = label;
        }

        /**
         * Converts the enum value to a string representation.
         *
         * @return The string label representing the user input option.
         */
        @Override
        public String toString() {
            return label;
        }
    }

    /**
     *
     */
    public enum userWayToAddANewCompany {
        CUSTOM("Input a custom name"),
        GENERATE("Generate a company name");
        // String label that holds the display name for each user input option.
        private final String label;

        // Constructor for userInputOptions, which initializes the label with a human-readable string.
        userWayToAddANewCompany(String label) {
            this.label = label;
        }

        /**
         * Converts the enum value to a string representation.
         *
         * @return The string label representing the user input option.
         */
        @Override
        public String toString() {
            return label;
        }
    }

    /**
     * Enum representing types of objects that can be printed by the system.
     * This enum allows the user to specify a particular type of data to display.
     */
    public enum printingType {
        //
        ALL_COMPANIES("All companies"),
        // Option to print all people (both employees and managers).
        ALL_PEOPLE("All people"),
        // Option to print only employees.
        DEVELOPER("Developers"),
        // Option to print only managers.
        MANAGER("Managers"),
        // Option to print only departments.
        DEPARTMENT("Departments");

        // String label that holds the display name for each printing option.
        private final String label;

        // Constructor for printingType, which initializes the label with a user-friendly string.
        printingType(String label) {
            this.label = label;
        }

        /**
         * Converts the enum value to a string representation.
         *
         * @return The string label representing the printing option.
         */
        @Override
        public String toString() {
            return label;
        }
    }

    /**
     * Method for starting a menu loop, asking for user input, and performing actions
     */
    public static void showMenu() {

        // Flag to control the exit from the menu loop
        boolean needToExit = false;

        // Main menu loop that continues until 'needToExit' is set to true
        do {
            // Prompting the user to select an action from the main menu
            menuOptions action = selectFromList("\n============ Main menu ===============\n", menuOptions.class);

            // Evaluating the action selected by the user
            switch (action) {
                case CREATE_COMPANY: {
                    createCompany();
                    break;
                }

                case SHOW_COMPANIES_LIST: {
                    // Print all companies
                    Printer.printCompanyNames(Store.companies);
                    break;
                }

                // If the "SORT" option is selected
                case SORT: {
                    // Asking for sort direction
                    sortingDirection sortingDirection =
                            selectFromList("\nSelect order direction:", sortingDirection.class);

                    // Create new sorted list of people
                    ArrayList<Person> sortedPeople =
                            SortAndSearchOperations.recursiveInsertionSort(Store.people, sortingDirection);

                    // Print top 20 items of sorted list
                    Printer.printPeople(sortedPeople, 20);

                    break;
                }

                // If the "SEARCH" option is selected
                case SEARCH: {
                    // Asking the user for a search input (could be first name, last name, or both)
                    String searchString = askUserForText("Enter first name, last name or both for searching: ");

                    // Performing a linear search in the list of people based on the search input
                    ArrayList<Person> searchResult = SortAndSearchOperations.linearSearchPeople(Store.people, searchString);

                    // Checking if any results were found and displaying them; otherwise, notify no results were found
                    if (searchResult.isEmpty()) {
                        System.out.println("No results were found for your request");
                    } else {
                        System.out.println("Search result: ");
                        Printer.printPeople(searchResult);
                    }

                    break;
                }

                // Third option is selected
                case USER_INPUT: {
                    //
                    if (Store.companies.isEmpty()) {
                        System.out.println("\nThere's no companies to add a new object.");
                        System.out.println("\nAdd a company first.");
                        userWayToAddANewCompany selectedOption = selectFromList("Select the way to add a new company: ", userWayToAddANewCompany.class);
                        switch (selectedOption) {
                            case CUSTOM: {
                                createCompany();
                                break;
                            }
                            case GENERATE: {
                                generateCompany();
                                break;
                            }
                        }
                    }
                    Company selectedCompany =  selectFromList("Select a company where to add a new object: ",
                            Store.companies.toArray(new Company[0]), Company::getName);
                    System.out.println("selectedCompany: "+ selectedCompany.name);

                    // Asking for type of object to create
                    userInputOptions inputOption =
                            selectFromList("What type of object do you want to add?", userInputOptions.class);

                    switch (inputOption) {
                        // Creating developer
                        case DEVELOPER: {
//                            CompanyHelper.addDeveloper(selectedCompany);
                            break;
                        }
                        // Creating manager
                        case MANAGER: {
                            CompanyHelper.addManager(selectedCompany);
                            break;
                        }
                        // Creating department
                        case DEPARTMENT: {
                            CompanyHelper.addDepartment(selectedCompany);
                            break;
                        }
                    }

                    break;
                }

                // Fourth option is selected
                case GENERATE: {
                    // Asking for type of object to generate
                    userGenerateOptions userGenerateOption =
                            selectFromList("What type of object do you want to generate?", userGenerateOptions.class);

                    switch (userGenerateOption) {
                        // Generating employee
                        case DEVELOPER: {
                            Developer developer = Developer.generate();
                            Store.people.add(developer);
                            System.out.println("Developer has been added: " + developer);
                            break;
                        }
                        // Generating manager
                        case MANAGER: {
                            Manager manager = Manager.generate();
                            Store.people.add(manager);
                            System.out.println("Manager has been added: " + manager);
                            break;
                        }
                        case COMPANY: {
                            generateCompany();
                            break;
                        }
                    }

                    break;
                }

                case PRINT: {
                    // Asking for type of objects to print
                    printingType printingOption = selectFromList("What type of object do you want to print?", printingType.class);

                    switch (printingOption) {
                        //
                        case ALL_COMPANIES: {
                            Printer.printCompaniesData(Store.companies);
                            break;
                        }
                        // Printing all data from Store.people
//                        case ALL_PEOPLE: {
//                            System.out.println("All people:");
//                            Printer.printPeople(Store.people, Store.people.size());
//                            break;
//                        }
                        // Printing all items from Store.people if they are Player
//                        case PLAYER: {
//                            System.out.println("All players:");
//
//                            Printer.printPeople(Store.people.stream().filter(x -> x instanceof Player).collect(Collectors.toCollection(ArrayList::new)));
//
//                            break;
//                        }
                        // Printing all items from Store.people if they are Coaches
//                        case COACH: {
//                            System.out.println("All coaches:");
//
//                            Printer.printPeople(Store.people.stream().filter(x -> x instanceof Coach).collect(Collectors.toCollection(ArrayList::new)));
//
//                            break;
//                        }
                        // Printing all teams
//                        case TEAM: {
//                            System.out.println("All teams:");
//                            Printer.printTeams(Store.teams);
//                            break;
//                        }
                    }

                    break;
                }

                // If the "EXIT" option is selected, set the exit flag to true to terminate the menu loop
                case EXIT: {
                    needToExit = true;
                    break;
                }
            }

            // Repeat the loop as long as "needToExit" is false
        } while (!needToExit);
    }

    /**
     * Method for input all data for creating an employee
     */
//    private static void addDeveloper() {
//        // Input first name
//        String firstName = askUserForWord("* Enter developer's first name:");
//        // Input last name
//        String lastName = askUserForWord("* Enter developer's last name:");
//        // Input gender
//        Gender gender = selectFromList("* Select the gender:  (* - required)", Gender.class);
//        // Input email
//        String email = askUserForEmail("Enter developer's email:");
//
//        // Input developer type
//        DeveloperType position = selectFromList("* Select developer's position", DeveloperType.class);
//
//        DepartmentBase department = null;
//
//        // Select department if available else department is null
//        if (!Store.departments.isEmpty()) {
//            department = selectFromList("* Select the department:", Store.getDepartmentArray(), ((t) -> String.valueOf(t.name)));
//        } else {
//            System.out.println("There is no any department stored! The field \"Department\" will be empty for the employee");
//        }
//
//        // Creating developer object
//        Developer newDeveloper = new Developer(firstName, lastName, email, gender, position, department);
//
//        // Adding new developer to the store
//        Store.people.add(newDeveloper);
//
//        //Print the result message
//        System.out.println("New developer has been added: " + newDeveloper);
//    }

    /**
     * Method for input all data for creating a manager
     */
/*    private static void addManager() {
        // Input first name
        String firstName = askUserForWord("* Enter manager's first name:");
        // Input last name
        String lastName = askUserForWord("* Enter manager's last name:");
        // Input gender
        Gender gender = selectFromList("* Select the gender:  (* - required)", Gender.class);
        // Input email name
        String email = askUserForEmail("Enter manager's email:");

        // Select manager type
        ManagerType managerType = selectFromList("* Select manager's type", ManagerType.class);

        DepartmentBase department = null;

        // Select department if available else department is null
        if (!Store.departments.isEmpty()) {
            department =
                    selectFromList("* Select the department:",
                            Store.getDepartmentArray(),
                            ((t) -> String.valueOf(t.name)));
        } else {
            System.out.println("There is no any department stored! The field \"Department\" will be empty for the manager");
        }

        // Creating manager object
        Manager manager = new Manager(firstName, lastName, email, gender, managerType, department);

        // Adding new manager to the store
        Store.people.add(manager);

        //Print the result message
        System.out.println("Manager has been added: " + manager);
    }*/

    /**
     * Method for add department
     */
//    private static void addDepartment(Company company) {
//        // Select department type
//        DepartmentDefaultType departmentType =
//                selectFromList("* Select department's type",
//                        DepartmentDefaultType.class);
//
//        DepartmentBase department = new DepartmentBase(departmentType);
//
//        // Adding new department to the store
//        Store.departments.add(department);
//
//        company.departments.add(department);
//
//        //Print the result message
//        System.out.println("Department has been added: " + department);
//    }

    private static void createCompany() {
        String companyName = askUserForText("\nEnter the name for your company: ");
        Company company = new Company(companyName);
        Store.companies.add(company);
        System.out.println("The company " + company.name + " was created");
    }

    private static void generateCompany() {
        Company newCompany = Company.generate();
        Store.companies.add(newCompany);
        System.out.println("The company has been added: " + newCompany.name);
    }
}
